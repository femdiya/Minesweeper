name: Update README Latest Version

on:
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Version and Update README
        id: version_update
        run: |
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            COMMIT_RANGE="${{ github.sha }}"
          else
            COMMIT_RANGE="${{ github.event.before }}..${{ github.sha }}"
          fi

          COMMIT_MESSAGES=$(git log --pretty=%B --reverse "${COMMIT_RANGE}")
          echo "::debug::Raw commit messages from git log:"
          echo "$COMMIT_MESSAGES"
          echo "::debug::End of raw commit messages."
          echo "---"

          LATEST_VERSION=""
          IS_BETA=false
          RAW_VERSION_LINE=""

          VERSION_REGEX="^Version ([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)( [(]Beta[)])?$"

          while IFS= read -r commit_msg_line; do
            commit_msg_line="${commit_msg_line%$'\r'}"
            echo "::debug::Checking commit message line (CR stripped): $commit_msg_line"
            echo "::debug::Regex being used: >>>${VERSION_REGEX}<<<"
            if [[ "$commit_msg_line" =~ $VERSION_REGEX ]]; then
              RAW_VERSION_LINE="$commit_msg_line"
              LATEST_VERSION="${BASH_REMATCH[1]}"
              if [[ -n "${BASH_REMATCH[3]}" ]]; then
                IS_BETA=true
              else
                IS_BETA=false
              fi
              echo "::notice::Found version in commit: $LATEST_VERSION, Beta: $IS_BETA (Raw processed line: $RAW_VERSION_LINE)"
            fi
          done <<< "$COMMIT_MESSAGES"
          echo "---"

          if [ -z "$LATEST_VERSION" ]; then
            echo "::warning::No version found in commit messages for this push."
            echo "readme_updated=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          TODAY_DATE=$(date +"%B %d, %Y")
          NEW_VERSION_STRING="**v${LATEST_VERSION}**"

          if [ "$IS_BETA" = true ]; then
            NEW_VERSION_STRING="${NEW_VERSION_STRING} (Beta)"
          fi

          NEW_VERSION_LINE="${NEW_VERSION_STRING} â€“ ${TODAY_DATE}"
          README_FILE="README.md"
          TEMP_README="README.md.tmp"
          echo "::notice::New version line to be written: $NEW_VERSION_LINE"

          awk -v new_line="$NEW_VERSION_LINE" '
          BEGIN { found_section = 0; replaced = 0 }
          /## ðŸš€ Latest Version/ { found_section = 1; print; next }
          found_section == 1 && /^(\*\*v[0-9]+\.[0-9]+(\.[0-9]+){0,2}.*?\*\*.*â€“.*)/ {
            if (replaced == 0) {
              print new_line
              replaced = 1
            }
            next
          }
          { print }
          END { if (found_section == 0) { print "## ðŸš€ Latest Version"; print new_line } }
          ' "$README_FILE" > "$TEMP_README"

          if cmp -s "$README_FILE" "$TEMP_README"; then
            echo "::notice::README.md is already up to date with version $LATEST_VERSION and today's date."
            echo "readme_updated=false" >> $GITHUB_OUTPUT
            rm "$TEMP_README"
          else
            echo "::notice::Updating README.md with version $LATEST_VERSION and date $TODAY_DATE."
            mv "$TEMP_README" "$README_FILE"
            echo "readme_updated=true" >> $GITHUB_OUTPUT
            echo "new_version_line=${NEW_VERSION_LINE}" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push README changes
        if: steps.version_update.outputs.readme_updated == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          git commit -m "docs: Update README with latest version and date

          ${{ steps.version_update.outputs.new_version_line }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
